generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String           @id @default(uuid())
  name        String
  email       String           @unique
  password    String
  role        UserRole         @default(USER)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  gym         Gym?             @relation(fields: [gymId], references: [id])
  gymId       String?
  subscriptions Subscription[]
  classes     ClassEnrollment[]
  gymAccesses GymAccess[]

  chats     Chat[]   @relation("ChatUsers")
  messages  Message[]
  messageReads MessageRead[]
  chatDeletes ChatDelete[]
}

model Gym {
  id        String   @id @default(uuid())
  name      String
  address   String 
  users     User[]
  classes   Class[]
  chats     Chat[]   @relation("GymChats")
  gymAccesses GymAccess[]
}

model Class {
  id         String            @id @default(uuid())
  name       String
  description String?
  startTime  DateTime
  endTime    DateTime
  maxUsers   Int
  gymId      String
  gym        Gym               @relation(fields: [gymId], references: [id])
  enrollments ClassEnrollment[]
}

model ClassEnrollment {
  id        String   @id @default(uuid())
  userId    String
  classId   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  class     Class    @relation(fields: [classId], references: [id])
}

model Subscription {
  id        String   @id @default(uuid())
  userId    String
  planName  String
  price     Float
  isActive  Boolean  @default(true)
  startDate DateTime
  endDate   DateTime
  user      User     @relation(fields: [userId], references: [id])
}

enum UserRole {
  USER
  TRAINER
  ADMIN
}


enum ChatType {
  GYM
  PRIVATE
  TRAINER
}

model Chat {
  id        String    @id @default(uuid())
  type      ChatType
  name      String?   // solo para GYM
  gymId     String? 
  gym       Gym?      @relation("GymChats", fields: [gymId], references: [id]) 
  users     User[]    @relation("ChatUsers")
  messages  Message[]
  createdAt DateTime  @default(now())
  chatDeletes ChatDelete[]
}

model Message {
  id        String   @id @default(uuid())
  content   String
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id])
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  createdAt DateTime @default(now())
  reads     MessageRead[]
}

model MessageRead {
  id        String   @id @default(uuid())
  messageId String
  userId    String
  readAt    DateTime?
  message   Message  @relation(fields: [messageId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  @@unique([messageId, userId])
}

model GymAccess {
  id        String   @id @default(uuid())
  userId    String
  gymId     String
  qrToken   String   @unique
  isUsed    Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  usedAt    DateTime?
  
  user      User     @relation(fields: [userId], references: [id])
  gym       Gym      @relation(fields: [gymId], references: [id])
}

model ChatDelete {
  id      String @id @default(uuid())
  chatId  String
  userId  String
  deletedAt DateTime @default(now())
  chat    Chat   @relation(fields: [chatId], references: [id])
  user    User   @relation(fields: [userId], references: [id])
  @@unique([chatId, userId])
}
